PREREQUISITE:
1. Oracle VM Virtualbox
2. Vagrant
3. Vagrant plugins
Execute below command in your computer to install hostmanager plugin
- $ vagrant plugin install vagrant-hostmanager  
The command allows VMs to have Host name to IP mapping.
4. Git bash

A. VM SETUP:
1. Clone source code.
2. Cd into the repository.
3. Switch to the local branch.
4. cd into vagrant/Manual_provisioning
Bring up vm’s
$ vagrant up
NOTE: Bringing up all the vm’s may take a long time based on various factors.
If vm setup stops in the middle run “vagrant up” command again.
INFO: All the vm’s hostname and /etc/hosts file entries will be automatically updated.

B. MYSQL SETUP:
1. Login to the db vm
- $ vagrant ssh db01
2. Verify Hosts entry, if entries missing update the it with IP and hostnames
- # cat /etc/hosts
3. Update OS with latest patches
- # dnf update -y
4. Set Repository
- # dnf install epel-release -y
5. Install Maria DB Package
- # dnf install git mariadb-server -y
6. Starting & enabling mariadb-server
- # systemctl start mariadb
- # systemctl enable mariadb
7. RUN mysql secure installation script.
- # mysql_secure_installation
8. Set DB name and users.
- # mysql -u root -padmin123
- mysql> create database accounts;
- mysql> grant all privileges on accounts.* TO 'admin'@'localhost' identified by
  'admin123';
- mysql> grant all privileges on accounts.* TO 'admin'@'%' identified by 'admin123';
- mysql> FLUSH PRIVILEGES;
- mysql> exit;
9. Download Source code & Initialize Database.
- # cd /tmp/
- # git clone -b local https://github.com/hkhcoder/vprofile-project.git
- # cd vprofile-project
- # mysql -u root -padmin123 accounts < src/main/resources/db_backup.sql
- # mysql -u root -padmin123 accounts
- mysql> show tables;
- mysql> exit;
10. Restart mariadb-server
- # systemctl restart mariadb
11. Starting the firewall and allowing the mariadb to access from port no. 3306
- # systemctl start firewalld
- # systemctl enable firewalld
- # firewall-cmd --get-active-zones
- # firewall-cmd --zone=public --add-port=3306/tcp --permanent
- # firewall-cmd --reload
- # systemctl restart mariadb

C. MEMCACHE SETUP:
1.Login to the Memcache vm
- $ vagrant ssh mc01
2. Verify Hosts entry, if entries missing update the it with IP and hostnames
- # cat /etc/hosts
3. Update OS with latest patches
- # dnf update -y
4. Install, start & enable memcache on port 11211
- # sudo dnf install epel-release -y
- # sudo dnf install memcached -y
- # sudo systemctl start memcached
- # sudo systemctl enable memcached
- # sudo systemctl status memcached
- # sed -i 's/127.0.0.1/0.0.0.0/g' /etc/sysconfig/memcached
- # sudo systemctl restart memcached
5. Starting the firewall and allowing the port 11211 to access memcache
- # systemctl start firewalld
- # systemctl enable firewalld
- # firewall-cmd --add-port=11211/tcp
- # firewall-cmd --runtime-to-permanent
- # firewall-cmd --add-port=11111/udp
- # firewall-cmd --runtime-to-permanent
- # sudo memcached -p 11211 -U 11111 -u memcached -d

D. RABBITMQ SETUP
1. Login to the RabbitMQ vm
- $ vagrant ssh rmq01
2. Verify Hosts entry, if entries missing update the it with IP and hostnames
- # cat /etc/hosts
3. Update OS with latest patches
- # dnf update -y
4. Set EPEL Repository
- # dnf install epel-release -y
5. Install Dependencies
- # sudo dnf install wget -y
- # dnf -y install centos-release-rabbitmq-38
- # dnf --enablerepo=centos-rabbitmq-38 -y install rabbitmq-server
- # systemctl enable --now rabbitmq-server
6. Setup access to user test and make it admin
- # sudo sh -c 'echo "[{rabbit, [{loopback_users, []}]}]." > /etc/rabbitmq/rabbitmq.config'
- # sudo rabbitmqctl add_user test test
- # sudo rabbitmqctl set_user_tags test administrator
- # rabbitmqctl set_permissions -p / test ".*" ".*" ".*"
- # sudo systemctl restart rabbitmq-server
7. Starting the firewall and allowing the port 5672 to access rabbitmq
- # sudo systemctl start firewalld
- # sudo systemctl enable firewalld
- # firewall-cmd --add-port=5672/tcp
- # firewall-cmd --runtime-to-permanent
- # sudo systemctl start rabbitmq-server
- # sudo systemctl enable rabbitmq-server
- # sudo systemctl status rabbitmq-server

E. TOMCAT SETUP
1. Login to the tomcat vm
- $ vagrant ssh app01
2. Verify Hosts entry, if entries missing update the it with IP and hostnames
- # cat /etc/hosts
3. Update OS with latest patches
- # dnf update -y
4. Set Repository
- # dnf install epel-release -y
5. Install Dependencies
- # dnf -y install java-17-openjdk java-17-openjdk-devel
- # dnf install git wget -y
6. Change dir to /tmp
- # cd /tmp/
7. Download & Tomcat Package
- # wget https://archive.apache.org/dist/tomcat/tomcat-10/v10.1.26/bin/apache-tomcat-10
.1.26.tar.gz
- # tar xzvf apache-tomcat-10.1.26.tar.gz
8. Add tomcat user
- # useradd --home-dir /usr/local/tomcat --shell /sbin/nologin tomcat
9. Copy data to tomcat home dir
- # cp -r /tmp/apache-tomcat-10.1.26/* /usr/local/tomcat/
10. Make tomcat user owner of tomcat home dir
- # chown -R tomcat.tomcat /usr/local/tomcat
11. Setup systemctl command for tomcat
12. Create tomcat service file
- # vi /etc/systemd/system/tomcat.service
13. Update the file with below content
[Unit]
Description=Tomcat
After=network.target
[Service]
User=tomcat
Group=tomcat
WorkingDirectory=/usr/local/tomcat
Environment=JAVA_HOME=/usr/lib/jvm/jre
Environment=CATALINA_PID=/var/tomcat/%i/run/tomcat.pid
Environment=CATALINA_HOME=/usr/local/tomcat
Environment=CATALINE_BASE=/usr/local/tomcat
ExecStart=/usr/local/tomcat/bin/catalina.sh run
ExecStop=/usr/local/tomcat/bin/shutdown.sh
RestartSec=10
Restart=always
[Install]
WantedBy=multi-user.target
14. Reload systemd files
- # systemctl daemon-reload
15. Start & Enable service
- # systemctl start tomcat
- # systemctl enable tomcat
16. Enabling the firewall and allowing port 8080 to access the tomcat
- # systemctl start firewalld
- # systemctl enable firewalld
- # firewall-cmd --get-active-zones
- # firewall-cmd --zone=public --add-port=8080/tcp --permanent
- # firewall-cmd --reload

CODE BUILD & DEPLOY (app01)
17. Maven Setup
- # cd /tmp/
- # wget https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3
.9.9-bin.zip
- # unzip apache-maven-3.9.9-bin.zip
- # cp -r apache-maven-3.9.9 /usr/local/maven3.9
- # export MAVEN_OPTS="-Xmx512m"
18. Download Source code
- # git clone -b local https://github.com/hkhcoder/vprofile-project.git
19. Update configuration
- # cd vprofile-project
- # vim src/main/resources/application.properties
- # Update file with backend server details
20. Build code
21. Run below command inside the repository (vprofile-project)
- # /usr/local/maven3.9/bin/mvn install
22. Deploy artifact
- # systemctl stop tomcat
- # rm -rf /usr/local/tomcat/webapps/ROOT*
- # cp target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war
- # systemctl start tomcat
- # chown tomcat.tomcat /usr/local/tomcat/webapps -R
- # systemctl restart tomcat

F. NGINX SETUP
1. Login to the Nginx vm
- $ vagrant ssh web01
- $ sudo -i
2. Verify Hosts entry, if entries missing update the it with IP and hostnames
- # cat /etc/hosts
3. Update OS with latest patches
- # apt update
- # apt upgrade
4. Install nginx
- # apt install nginx -y
5. Create Nginx conf file
- # vi /etc/nginx/sites-available/vproapp
6. Update with below content
upstream vproapp {
server app01:8080;
}
server {
listen 80;
location / {
proxy_pass http://vproapp;
}
}
7. Remove default nginx conf
- # rm -rf /etc/nginx/sites-enabled/default
8. Create link to activate website
- # ln -s /etc/nginx/sites-available/vproapp /etc/nginx/sites-enabled/vproapp
9. Restart Nginx
- # systemctl restart nginx
